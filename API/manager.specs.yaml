openapi: "3.0.0"

info:
  title: Cloud storage app
  version: "0.1"

servers:
  - url: http://85.160.74.136:8080/
    description: Example API Service

paths:
  /apistatus:
    get:
      tags: 
        - API management
      summary: Health status of application
      description: Checks database availability and API response threshold time.
      operationId: manager.api_status.ApiStatus.get
      responses:
        200:
          description: API is healthy
        400:
          description: API is down

  /salt:
    get:
      tags: 
        - API management
      summary: Get salt from database
      description: Get salt from database
      operationId: manager.salt.Salt.get
      responses:
        200:
          description: Salt sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  salt:
                    type: string
                    description: Salt for password
                    example: OPIlkasjbdhar                
        400:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMsg"

  /users/{user}:
    get:
      tags: 
        - User handling
      summary: Get usernames of users
      description: Get usernames of users
      operationId: manager.users.Users.get
      responses:
        200:
          description: Users fetched successfully
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMsg"
      parameters:
        - in: path
          name: user
          description: Username
          required: true
          schema:
            type: string
            example: blah

  /users/create:
    put:
      tags: 
        - User handling
      summary: Get user based on their id
      description: Get user based on their id
      operationId: manager.users.CreateUser.put
      requestBody:
        description: Post data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: Karel123
                password:
                  type: string
                  example: nosorozci123
              required:
                - userName
                - password
      responses:
        200: 
          description: User created successfully
        400:
          description: User creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMsg"
        409:
          description: Username already taken.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMsg"

  /users/auth/{user_name}/{user_passwd}:
    get:
      tags: 
        - User handling
      summary: Get user based on their id
      description: Get user based on their id
      operationId: manager.users.UserAuthentication.get
      responses:
        200:
          description: User authentication successful
        400:
          description: User authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMsg"
      parameters:
        - in: path
          name: user_name
          description: Username
          required: true
          schema:
            type: string
            example: blahs
        - in: path
          name: user_passwd
          description: Users password
          required: true
          schema:
            type: string
            example: blah

  /files/{user}:
    put:
      tags: 
        - File handling
      summary: Post a file.
      description: Post a file.
      operationId: manager.files.FilePutHandler.put
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
      responses:
        200:
          description: File posted successfully
        400:
          description: Error while posting a file.
    parameters:
      - in: path
        name: user
        description: Username
        required: true
        schema:
          type: string
          example: blah
      - in: query
        name: directory
        description: Current directory
        required: true
        schema:
          type: string
          example: /

  /file/{user}:
    delete:
      tags:
        - File handling
      summary: Delete file
      description: Delete file
      operationId: manager.files.FileDeleteHandler.delete
      responses:
        200:
          description: File deleted successfully.
        400:
          description: Error while deleting file.
    parameters:
      - in: path
        name: user
        description: Username
        required: true
        schema:
          type: string
          example: blah
      - in: query
        name: fileName
        description: File to delete
        required: true
        schema:
          type: string
          example: blah.png
  
  /files/download:
    get:
      tags: 
        - File handling
      summary: Get file back.
      description: Get file back.
      operationId: manager.files.FileGetHandlerDownload.get
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: Error
      parameters:
        - in: query
          name: user
          description: Username
          required: true
          schema:
            type: string
            example: blah
        - in: query
          name: directory
          description: Current directory
          required: true
          schema:
            type: string
            example: /
        - in: query
          name: fileName
          description: File name
          required: true
          schema:
            type: string
            example: blah.png

  /files/{user}/list:
    get:
      tags: 
        - File handling
      summary: Get files poster by user.
      description: Get files posted by user.
      operationId: manager.files.FileGetHandler.get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/FilesGetResponse"
        400:
          description: Error
      parameters:
        - in: path
          name: user
          description: Username
          required: true
          schema:
            type: string
            example: blah     
        - in: query
          name: directory
          schema:
            type: string
            example: /

  /files/folder/{user}:
    put:
      tags: 
        - File handling
      summary: Create remote folder.
      description: Create remote folder.
      operationId: manager.files.FolderHandler.put
      responses:
        200:
          description: OK
        400:
          description: Error
      parameters:
        - in: path
          name: user
          description: Username
          required: true
          schema:
            type: string
            example: blah     
        - in: query
          name: directory
          schema:
            type: string
            example: /
        - in: query
          name: folderName
          schema:
            type: string
            example: /

  /share/{user}:
    put:
      tags:
        - File sharing
      summary: Create shared file
      description: Create shared file
      operationId: manager.share.ShareFile.put
      responses:
        200:
          description: OK
        400:
          description: Error
      parameters:
        - in: path
          name: user
          description: Username
          required: true
          schema:
            type: string
            example: blah     
        - in: query
          name: toUser
          description: Username
          required: true
          schema:
            type: string
            example: blah   
        - in: query
          name: directory
          required: true
          schema:
            type: string
            example: /
        - in: query
          name: fileName
          schema:
            type: string
            example: /
          allowEmptyValue: true

  /share/{user}/list:
    get:
      tags:
        - File sharing
      summary: Get shared files of user
      description: Get shared files of user
      operationId: manager.share.ListSharedFiles.get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/FilesGetResponse"
        400:
          description: Error
      parameters:
        - in: path
          name: user
          description: Username
          required: true
          schema:
            type: string
            example: blah     

components:
  schemas:
    ErrorMsg:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Error msg
              example: Internal server error
            status:
              type: string
              description: Error code
              example: 404
          required:
            - message
            - status
              
    UsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: string

    FilesGetResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              fileName:
                type: string
              fileType:
                type: string
            required:
              - fileName
              - fileType

    ShareGetResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              fileName:
                type: string
              fileType:
                type: string
              fromUser:
                type: string
            required:
              - fileName
              - fileType
              - fromUser